//////////////////////////
/////// SCALA ////////////
//////////////////////////

// FILE: homework/HW1.scala

/**
 * the language interpreted here is exactly as listed in the homework.
 * here are some example expressions and the values they reduce to (on the right of the ->):
 *
 * "hello"-> "hello"
 * (("hello" & " ") & "world") -> "hello world"
 * (("hello" @ "l") & ("a world" @ "a")) -> "lo world"
 * ("filename.scm" @ ".") -> "scm")
 *
 * the implementation contains the following:
 *   a reader to parse Strings into the Scala equivalent of s-expressions
 *   the parser and interpreter themselves (in object HW1)
 *   a few tests (though it could certainly use more)
 *   some minor scaffolding to support the above
 *
 * one final thought on the tests: they are terribly ugly.
 * the scheme tests come out infinitely nicer.
 *
 * however, the actual implementation of the parser and interpreter was trivial.
 */
package homework

object HW1 {

  trait Exp
  case class StringLit(s:String) extends Exp
  case class Concat(left: Exp, right: Exp) extends Exp
  case class RestAfter(left: Exp, right: Exp) extends Exp

  object HW1Interpreter extends Interpreter[Exp, String] with Parser[Exp] {
    def eval(exp: Exp): String = {
      exp match {
        case StringLit(s) => s.drop(1).dropRight(1)
        case Concat(l, r) => eval(l) + eval(r)
        case RestAfter(l, r) => {
          val ls = eval(l)
          val rs = eval(r)
          val i = ls indexOf rs
          if (i == -1) error(rs + " not in " + ls) else ls.substring(i+1)
        }
      }
    }

    def parse(expr: Any): Exp = {
      expr match {
        case s: String => StringLit(s)
        case List(xs, "&", ys) => Concat(parse(xs), parse(ys))
        case List(xs, "@", ys) => RestAfter(parse(xs), parse(ys))
        case _ => error("unexpected token: " + expr)
      }
    }
  }
}

trait Interpreter[E,V] {
  def eval(exp: E): V
}

trait Parser[E] {
  def parse(exp: Any): E
}

class Reader {

  def read(s:String): Any = read(s.toStream)

  def read(stream:Stream[Char]): Any = readWithRest(stream)._1

  def readWithRest(stream:Stream[Char]): (Any, Stream[Char]) = {

    def readList(stream: Stream[Char], acc: List[Any]): (List[Any], Stream[Char]) = {
      stream match {
        case ')' #:: tail => (acc, tail)
        case x   #:: tail =>
          val (next, rest) = readWithRest(stream)
          readList(rest, acc ::: List(next))
	case Stream()     => error("unterminated list")
      }
    }

    def readChars(stream:Stream[Char]): (String, Stream[Char]) = {
      val (chars, rest) = stream.span( ! List('(', ')', ' ').contains(_) )
      (chars.mkString, rest)
    }

    def readStringLit(stream: Stream[Char], acc: String): (String, Stream[Char]) = {
      stream match {
        case '"' #:: tail => (acc + '"', tail)
        case c   #:: tail => readStringLit(tail, acc + c)
	case Stream()     => error("unterminated string literal")
      }
    }

    stream match {
      case '(' #:: tail => readList(tail, Nil)
      case ' ' #:: tail => readWithRest(tail)
      case '"' #:: tail => readStringLit(tail, "\"")
      case ')' #:: _    => error("unexpected token )")
      case _ => readChars(stream)
    }
  }
}

// FILE: homework/HW1Test.scala

package homework

import HW1._

class HW1Test extends HWBaseTest[Exp, String](HW1Interpreter){

  testCode(""" "hello" """ -> "hello")
  testCode(""" (("hello" & " ") & "world") """ -> "hello world")
  testCode(""" (("hello" @ "l") & ("a world" @ "a")) """ -> "lo world")
  testCode(""" ("filename.scm" @ ".") """ -> "scm")
}

// FILE: homework/HWBaseTest.scala

abstract class HWBaseTest[E,V](val interpreter:Interpreter[E,V] with Parser[E]) extends org.scalatest.FunSuite {

  def testCode(t: (String, V)): Unit = {
    test(t._1 + " mustBe " + t._2){
      assert(interpreter.eval(interpreter.parse(new Reader().read(t._1))) === t._2)
    }
  }

  def testExp(t: (E, V)): Unit = {
    println("calling test with: " + t)
    test(t._1 + " mustBe " + t._2){ assert(interpreter.eval(t._1) === t._2) }
  }
}

// FILE: homework/ReaderTest.scala

package homework

import org.scalatest.FunSuite
import org.scalatest.matchers.MustMatchers

class ReaderTest extends FunSuite with MustMatchers {

  testRead("hello" -> "hello")
  testRead("\"hello\"" -> "\"hello\"")
  testRead("\"hello world\"" -> "\"hello world\"")

  testRead("(hey world)" -> List("hey", "world"))
  testRead("(\"hey\" world)" -> List("\"hey\"", "world"))

  def testRead(t: (String,Any)){
    test(t._1 + " must be " + t._2 ){
      new Reader().read(t._1.toStream) must be(t._2)
    }
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; SCHEME ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
;; the language interpreted here is exactly as listed in the homework.
;; here are some example expressions and the values they reduce to (on the right of the ->):
;;
;; "hello" -> "hello"
;; (("hello" & " ") & "world") -> "hello world"
;; (("hello" @ "l") & ("a world" @ "a")) -> "lo world"
;; ("filename.scm" @ ".") -> "scm")
;;

;; FILE homework/hw1.ss

;; The first three lines of this file were inserted by DrScheme. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(planet plai/plai:1:6/lang/reader)

(define-type EXP
  [string-lit (n string?)]
  [concat (left EXP?) (right EXP?)]
  [rest-after (left EXP?) (right EXP?)]
)

(define (parse sexp)
  (cond
    [(string? sexp) (string-lit sexp)]
    [(list? sexp)
     (case (second sexp)
       [(&) (concat (parse (first sexp)) (parse (third sexp)))]
       [(@) (rest-after (parse (first sexp)) (parse (third sexp)))]
       )]
    [else (error "unexpected token")]
    ))

(define (crazy-string-find-thing findme instring)
  (cond
    [(> (string-length findme) (string-length instring)) (error (string-append findme " not found in " instring))]
    [(string=? findme (substring instring 0 (string-length findme))) (substring instring (string-length findme))]
    [else (crazy-string-find-thing findme (substring instring 1))]))

(define (interpret exp)
  (type-case EXP exp
             [string-lit (s) s]
             [concat (l r) (string-append (interpret l) (interpret r))]
             [rest-after (l r) (crazy-string-find-thing (interpret r) (interpret l))]))

(define (testcode l r)(test (interpret(parse l)) r))
(define (testcode/exn l r)(test/exn (interpret(parse l)) r))

(testcode "" "")
(testcode "hello" "hello")
(testcode '(("hello" & " ") & "world") "hello world")
(testcode '(("hello" @ "l") & ("a world" @ "a")) "lo world")
(testcode '((("a" & "b") & ("a" & "b")) & (("a" & "b") & ("a" & "b"))) "abababab")
(testcode '(((((("abababab" @ "a") @ "b") @ "a") @ "b") @ "a") @ "b") "ab")
(testcode '((((((("a" & "b") & ("a" & "b")) & (("a" & "b") & ("a" & "b"))) @ "ab") @ "ab") @ "ab") @ "ab") "")
(testcode '("filename.scm" @ ".") "scm")
(testcode/exn 6 "unexpected token")
(testcode/exn '("x" @ "hello") "hello not found in x")
(testcode/exn '("" @ "x") "x not found in ")
(testcode/exn '(("" & "") @ "x") "x not found in ")
(testcode/exn '(((((((("a" & "b") & ("a" & "b")) & (("a" & "b") & ("a" & "b"))) @ "ab") @ "ab") @ "ab") @ "ab") @ "x") "x not found in ")

-- -------------------
-- haskell code below
----------------------
----------------------
notes: (this is meant to be in a block comment...)
this implementation is relatively incomplete
its my first legit attempt at writing haskell code
this code can benefit from a LOT of cleanup
there might (most definitely) be things done in ways that real haskell programmers would laugh at me for
it doesnt have tests, though ive pasted an interpreter section at the end

the language interpreted here doesnt have proper support for string literals
the "strings" here are really just sets of consecutive characters. here are some legal expressions
in this language, and the corresponding values that they reduce to (on the right of the =).

hello = hello
(hello & world) = helloworld
(google.com @ .) = com
((goodbye & cruel) & world) = goodbyecruelworld

the implementation contains the following:
a reader to parse Strings into SExpr
the parser and interpreter themselves 
-- -------------------

data SExpr = StringLit String | List [SExpr]

instance Show SExpr where
	show (StringLit s) = s
	show (List e) = show e

reader :: String -> SExpr
reader s = let (sexpr, _) = readWithRest s in sexpr

readL :: String -> SExpr -> (SExpr,String)
readL (')' : tail) (List acc) = (List acc, tail)
readL (x : xs) (List acc) = let (next, rest) = readWithRest(x : xs) in readL rest (List (acc ++ [next]))
readL _ _ = error "unterminated list"

readChars :: String -> String -> (SExpr, String)
readChars (' ' : tail) acc = (StringLit acc, [' '] ++ tail)
readChars (')' : tail) acc = (StringLit acc, [')'] ++tail)
readChars ('(' : tail) acc = (StringLit acc, ['('] ++tail)
readChars (c : tail) acc = readChars tail (acc ++ [c])
readChars [] acc = (StringLit acc, [])

readWithRest :: String -> (SExpr,String)
readWithRest (' ' : tail) = readWithRest tail
readWithRest ('(' : tail) = readL tail (List [])
--readWithRest ('"' : tail) = readStringLit tail ['"']
readWithRest (c : tail) = readChars (c : tail) []

--readStringLit :: String -> String -> (SExpr, String)
--readStringLit ('"' : tail) acc = (StringLit (acc ++ ['"']), tail)
--readStringLit (c : tail) acc = readStringLit tail (acc ++ [c])

data Exp = StringLit2 String | Concat Exp Exp | RestAfter Exp Exp

instance Show Exp where
	show (StringLit2 s) = s
	show (Concat l r) = show l ++ " & " ++ show r
	show (RestAfter l r) = show l ++ " @ " ++ show r

parser :: SExpr -> Exp
parser (StringLit s) = StringLit2 s
parser (List (xs : (StringLit "&") : ys : [])) = Concat (parser xs) (parser ys)
parser (List (xs : (StringLit "@") : ys : [])) = RestAfter (parser xs) (parser ys)
parser _ = error "unexpected token"

finder :: String -> String -> String
finder findme instring =
    if (length findme) > (length instring) then error (findme ++ " not found")
    else if findme == (take (length findme) instring) then drop (length findme) instring
    else finder findme (drop 1 instring)

interpreter :: Exp -> String
interpreter (StringLit2 s) = s
interpreter (Concat l r) = (interpreter l) ++ (interpreter r)
interpreter (RestAfter l r) = finder (interpreter r) (interpreter l)


-----------------------------
-- interpreter session below
-----------------------------

*Main> interpreter (parser (reader "hello"))
"hello"
*Main> interpreter (parser (reader "(hello & world)"))
"helloworld"
*Main> interpreter (parser (reader "((hello & world) @ wo)"))
"rld"
*Main> interpreter (parser (reader "(((hello & world) @ ll) @ w)"))
"orld"