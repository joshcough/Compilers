#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the PLT Scheme editor format.
   Open this file in DrScheme version 4.2.4 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 40 #"(lib \"image-core.ss\" \"2htdp\" \"private\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 42 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drscheme:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 6908 0 24 3 27 #"#lang planet plai/plai:1:14"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #"; scheme features used in original fae interpreter"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 4 29 1 #"\n"
0 0 17 3 7 #"; lists"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";; deconstructors - first, second ect"
0 0 4 29 1 #"\n"
0 0 17 3 20 #"; numbers (and +, -)"
0 0 4 29 1 #"\n"
0 0 17 3 11 #"; functions"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; predicates number? symbol? list?"
0 0 4 29 1 #"\n"
0 0 17 3 10 #"; symbol=?"
0 0 4 29 1 #"\n"
0 0 17 3 53 #"; if (only if zero, but that means number comparison)"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"; let"
0 0 4 29 1 #"\n"
0 0 17 3 57 #"; define type and its pattern matching and deconstructors"
0 0 4 29 1 #"\n"
0 0 17 3 51 #"; errors, strings, built in find function, booleans"
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; just about everything!"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 8 #";; types"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 4 3 1 #" "
0 0 14 3 6 #"Myself"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 34 #"; are both of these really needed?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"rhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"sub"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"rhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"then"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"param"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"arg"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"rhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 17 3 7 #"; first"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 17 3 6 #"; rest"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 66
#"; for every primitive in the language, you need a predicate for it"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 62
#"; or is it every possible result value? is there a difference?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 5 #"numb?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 5 #"symb?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 5 #"pear?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 5 #"proc?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 46 #"; magic equality test that returns 0 (true) if"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 56 #"; two numbers are the same, or two symbols are the same."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 5 #"same?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"rhs"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 5 #"cons?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"param"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 14 3 7 #"Myself?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 4 #"Env?"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 4 3 1 #" "
0 0 14 3 10 #"SymValPair"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 10 #"symValPair"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #")("
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 14 3 11 #"Myself-Val?"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"Env?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"listof"
0 0 4 3 1 #" "
0 0 14 3 11 #"SymValPair?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";; parse : sexpr -> Myself"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 5 #"list?"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"case"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sub"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 4 #"with"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"parse-with"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"if0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"fourth"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 4 #"pair"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #"))("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"fst"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"snd"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"sym"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 5 #"same?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"same?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 5 #"numb?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"numb?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 5 #"symb?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"symb?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 5 #"pear?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pear?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 5 #"proc?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"proc?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"fun"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 17 3 70
(
 #";; assume any other symbols are function names, therefore applicatio"
 #"n."
) 0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 18 #"\"unexpected token\""
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 28 #";; parse-with : sexpr -> fun"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";;{with {x myself1} myself2} => {{fun {x} myself2} myself1}"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"parse-with"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; parse-app : sexpr -> add"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";; {myself1 myself2 myself3 myself4} => {app {app {app 1 2} 3} 4}"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"case"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"drop-right"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"last"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 30 #";; if the list is one long...F"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 30 #"\"appliction without arguments\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 51 #";{fun {a b} {+ a b}} => {fun {a} {fun {b} {+ a b}}}"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; parse-fun : sexpr -> fun"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"case"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"bad syntax\""
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";; interp : Myself Env -> Myself-Val"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 6 #"Myself"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 20 #"; TODO - write tests"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"addV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"sub"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"subV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 20 #"; TODO - write tests"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 5 #"same?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"sameV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ifop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"fun-expr"
0 0 4 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")]["
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 8 #"arg-expr"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"["
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 14 3 6 #"cl-env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"symValPair"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 6 #"cl-env"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 32 #"\"application expected procedure\""
0 0 22 3 5 #")]))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 19 #"\"fst expected list\""
0 0 22 3 4 #")])]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 19 #"\"snd expected list\""
0 0 22 3 4 #")])]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 20 #"; TODO - write tests"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 5 #"numb?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 17 3 28 #"; returning 0 for true. ick."
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")])]"
0 0 4 3 1 #" "
0 0 17 3 38 #"; returning 1 for false, double ick!  "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 20 #"; TODO - write tests"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 5 #"symb?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")])]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 20 #"; TODO - write tests"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 5 #"pear?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")])]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 20 #"; TODO - write tests"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 5 #"proc?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")])]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"addV"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"mathV"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"subV"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"mathV"
0 0 4 3 1 #" "
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"sameV"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"numV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"numV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"mathV"
0 0 4 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"symV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"symV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"symV-s"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #")("
0 0 14 3 6 #"symV-s"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 37 #"\"same? expected two nums or two syms\""
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"mathV"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"numV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"numV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"numV-n"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #")("
0 0 14 3 6 #"numV-n"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 35 #"\"numeric operation expected number\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ifop"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"numV?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"numV-n"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";; lookup: sym env -> Myself-Val"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 14 3 2 #"ds"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 14 #"symValPair-val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"find-or-die"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"symValPair-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"ds"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 19 #"\"free identifier: \""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";; utility functions"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";; utility types and functions"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";; Scala's Option, Maybe in Haskell."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 4 3 1 #" "
0 0 14 3 6 #"Option"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 4 #"none"
0 0 22 3 1 #"]"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 4 #"some"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"v"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"findo"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"none"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"some"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"findo"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";; find-or-die: predicate list[T] string -> T"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"find-or-die"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 12 #"error-string"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 6 #"Option"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"findo"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 4 #"some"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #"]"
0 0 4 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 4 #"none"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 14 3 12 #"error-string"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"zip-with"
0 0 4 3 1 #" "
0 0 14 3 5 #"const"
0 0 4 3 1 #" "
0 0 14 3 2 #"ll"
0 0 4 3 1 #" "
0 0 14 3 2 #"lr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 2 #"ll"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"()]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 2 #"lr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"()]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"const"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 2 #"ll"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 2 #"lr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"zip-with"
0 0 4 3 1 #" "
0 0 14 3 5 #"const"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 2 #"ll"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 2 #"lr"
0 0 22 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"zip"
0 0 4 3 1 #" "
0 0 14 3 2 #"ll"
0 0 4 3 1 #" "
0 0 14 3 2 #"lr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"zip-with"
0 0 4 3 1 #" "
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"ll"
0 0 4 3 1 #" "
0 0 14 3 2 #"lr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";; pair"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 14 #"; Y combinator"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"addf"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";; parse tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; parse basics"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sub"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sub"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sub"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";; parse application tests"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 19 3 30 #"\"appliction without arguments\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #")("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #")("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"w"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"w"
0 0 22 3 2 #")("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-app"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"Q"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"Q"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";; parse fun tests"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"bad syntax\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"parse-fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 3 #"))("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; interp tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 60
#";; simple tests just to make sure interp returns myself-vals"
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; simple numer case here"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 46 #"; at least make sure we return simple closures"
0 0 4 29 1 #"\n"
0 0 17 3 56 #"; this would the place to put tests for more complicated"
0 0 4 29 1 #"\n"
0 0 17 3 51 #"; closures, if any errors arise. i haven't had any."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"add"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";; interp-expr tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 66
#";; tests not requiring the library functions, just the interpreter"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";; bad math test"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"{"
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"x"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #"}))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 19 3 35 #"\"numeric operation expected number\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";; bad application test"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #"}))"
0 0 4 3 1 #" "
0 0 19 3 32 #"\"application expected procedure\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"w"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 19 3 17 #"\"free identifier\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"Q"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 19 3 17 #"\"free identifier\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";; function tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 64
#"; test for functions with the same id in arg list more than once"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";; pair tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"interp-expr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";; library"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 14 3 15 #"depends-on-libs"
0 0 4 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"create-lib-func"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 14 3 2 #"ds"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"symValPair"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"ds"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"ds"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 14 3 6 #"acc-ds"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 15 #"create-lib-func"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 4 #"pair"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 4 #"pair"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 6 #"acc-ds"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 4 3 1 #" "
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 15 #"depends-on-libs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 5 #"pairs"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; base library"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";; boolean library"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"boolean-lib"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; math library"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"math-lib"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 11 #"boolean-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"addf"
0 0 4 3 1 #" "
0 0 14 3 4 #"addf"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"split-neg?"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"SN"
0 0 22 3 2 #")("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #")("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"SN"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 9 #")))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"split-neg?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"add-n-times"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"NX"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"NX"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"add-n-times"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; list library"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"list-lib"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 8 #"math-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"mapreduce"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 2 #"MR"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 2 #"}}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 2 #"MR"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 8 #"}}}}}}})"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"reduce"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 9 #"mapreduce"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"x"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 9 #"mapreduce"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"}}"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 2 #"xs"
0 0 22 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"l"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 6 #"reduce"
0 0 4 3 1 #" "
0 0 14 3 4 #"addf"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 6 #"}}))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";; finally, the entire myself library."
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"myself-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 8 #"list-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"math-lib"
0 0 4 3 1 #" "
0 0 14 3 11 #"boolean-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #";; parse the expression, and then interpret (with access to the main"
 #" library)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"myself-lib"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 14 3 12 #"myself-value"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"type-case"
0 0 4 3 1 #" "
0 0 14 3 10 #"Myself-Val"
0 0 4 3 1 #" "
0 0 14 3 12 #"myself-value"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"["
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"["
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"["
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"["
0 0 14 3 8 #"closureV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 2 #"ds"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; simple tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 2 #"11"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";; pair tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"}}))"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 6 #"}}}}))"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"{"
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #"}}{"
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 5 #"}}}))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"{"
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"x"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"}}"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"}}{{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 5 #"}}}))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";; list library tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"; sum"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #")))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 6 #"))))))"
0 0 4 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 7 #")))))))"
0 0 4 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 7 #")))))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"; reduce"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 6 #"reduce"
0 0 4 3 1 #" "
0 0 14 3 4 #"addf"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 7 #")))))))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 6 #"reduce"
0 0 4 3 1 #" "
0 0 14 3 4 #"addf"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 2 #"20"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 2 #"30"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 2 #"40"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 7 #")))))))"
0 0 4 3 1 #" "
0 0 20 3 3 #"105"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"; map"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 79
(
 #"; since lists are functions, i cant easily test the results of map f"
 #"or equality"
) 0 0 4 29 1 #"\n"
0 0 17 3 54 #"; so instead, i map, then sum, then check the answer. "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"40"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";; math lib tests"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 4 3 1 #" "
0 0 20 3 2 #"-5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"add-n-times"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"add-n-times"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 2 #"21"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"add-n-times"
0 0 4 3 1 #" "
0 0 20 3 2 #"50"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 3 #"500"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 2 #"-3"
0 0 4 3 1 #" "
0 0 20 3 2 #"-3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 2 #"-3"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 2 #"-9"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 2 #"-3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 2 #"-9"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 2 #"-9"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 2 #"-9"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"mult"
0 0 4 3 1 #" "
0 0 20 3 3 #"100"
0 0 4 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 5 #"10000"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"pos?"
0 0 4 3 1 #" "
0 0 20 3 2 #"-2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 20 3 2 #"-5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"to-plt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"myself"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 58
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";; PART 2 "
0 0 4 29 1 #"\n"
0 0 17 3 58
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #"; the first important question is: "
0 0 4 29 1 #"\n"
0 0 17 3 42 #"; what representation am i going to parse?"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 64
#"; answer: it can only be things that the language can understand"
0 0 4 29 1 #"\n"
0 0 17 3 84
(
 #"; so, syms, nums, lists, functions. but, we probably wont pass the p"
 #"arser functions."
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #"; next important question is:"
0 0 4 29 1 #"\n"
0 0 17 3 37 #"; what is the AST going to look like?"
0 0 4 29 1 #"\n"
0 0 17 3 57 #"; one thing is for certain, it must be a legal Myself-Val"
0 0 4 29 1 #"\n"
0 0 17 3 46 #"; because it will be the output of the parser."
0 0 4 29 1 #"\n"
0 0 17 3 22 #"; my best first guess:"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; (pairV ((symV 'num) . (numV 7)))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #"; the first item in the pair will indicate the datatype of the secon"
 #"d"
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #"; for simplicity, i omit the outer pair for the actual ast listings "
 #"below"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"; ((symV 'num) . (numV 7))"
0 0 4 29 1 #"\n"
0 0 17 3 36 #"; ((symV 'sym) . (symV 'something)) "
0 0 4 29 1 #"\n"
0 0 17 3 29 #"; ((symV 'add) . (lhs . rhs))"
0 0 4 29 1 #"\n"
0 0 17 3 29 #"; ((symV 'sub) . (lhs . rhs))"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; ((symV 'id) . (symV 'something))"
0 0 4 29 1 #"\n"
0 0 17 3 39 #"; ((symV 'if) . (test . (then . else)))"
0 0 4 29 1 #"\n"
0 0 17 3 29 #"; ((symV 'fun) . (id . body))"
0 0 4 29 1 #"\n"
0 0 17 3 25 #"; ((symV 'app) . (f . a))"
0 0 4 29 1 #"\n"
0 0 17 3 30 #"; ((symV 'pair) . (lhs . rhs))"
0 0 4 29 1 #"\n"
0 0 17 3 21 #"; ((symV 'fst) . lst)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #"; ((symV 'snd) . lst)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #"; ((symV 'num?) . x)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #"; ((symV 'pear?) . x)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #"; ((symV 'proc?) . x)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"eval-lib"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 8 #"list-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"math-lib"
0 0 4 3 1 #" "
0 0 14 3 11 #"boolean-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"PARSE"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"numb?"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #"}"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"symb?"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #"}"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"pear?"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #"}"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"same?"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"PARSE"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 3 #"}}}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"PARSE"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 5 #"}}}}}"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 11 #"parse-error"
0 0 22 3 2 #"}}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 11 #"parse-error"
0 0 22 3 4 #"}}}}"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 4 #"}}})"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"eval"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"EVAL"
0 0 22 3 1 #"}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"expr"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #"}"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"{"
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"type"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"fst"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"}}"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"body"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"snd"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 17 3 55 #"; look for numbers: (pairV (cons (symV 'num) (numV 5)))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 17 3 51 #"; important question, can i return the same values?"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 17 3 54 #"; for example, can i take (numV 5) and return (numV 5)"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"same?"
0 0 4 3 1 #" "
0 0 14 3 4 #"type"
0 0 4 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"}}"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 10 #"eval-error"
0 0 22 3 8 #")}}}}}})"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"myself-meta-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"create-lib"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 8 #"eval-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"list-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"math-lib"
0 0 4 3 1 #" "
0 0 14 3 11 #"boolean-lib"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lib"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"myself-k2"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 15 #"myself-meta-lib"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"myself-k2"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"myself-k2"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"sym"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"f"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 109
(
 #"; ugh, how do i represent the empty list? just using (pair 0 0) for "
 #"now. will i need to add empty? to myself?"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"myself-k2"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"eval"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 17 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 17 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 94
(
 #"; some very concerning news: if i call eval without the second arg, "
 #"the program hangs forever!"
) 0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"test"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 9 #"myself-k2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 6 #"eval ("
0 0 17 3 5 #"parse"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 13 #"))) (numV 5))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 60
#"; so instead of (+ 5 6), i have: (pair (sym add) (pair 5 6))"
0 0 4 29 1 #"\n"
0 0 17 3 78
(
 #"; my quest was concerned with not changing the representation too dr"
 #"amatically"
) 0 0 4 29 1 #"\n"
0 0 17 3 31 #"; parsing has a big say here..."
0 0 4 29 1 #"\n"
0 0 17 3 81
(
 #"; does this qualify as dramatic? im not sure...really, they are kind"
 #" of the same."
) 0 0 4 29 1 #"\n"
0 0 17 3 84
(
 #"; just that the original implementation can rely on schemes reader, "
 #"and myself cant."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"myself-k2"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pair"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"add"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 5 #"pairV"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"symV"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"numV"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #"; can i try to explain to myself how parsing works....?"
0 0 4 29 1 #"\n"
0 0 17 3 94
(
 #"; myself-k2 first parses the sexpr (parse 5) (using the original par"
 #"ser written in plt scheme)"
) 0 0 4 29 1 #"\n"
0 0 17 3 52 #"; this results in: (app the-parse-function (num 5)) "
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #"; this is then passed to interp (the original myself interpreter wri"
 #"tten in plt scheme)"
) 0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #"; this takes a few steps to finish. first, it evaluates the function"
 #" and arg arguments."
) 0 0 4 29 1 #"\n"
0 0 17 3 51 #";   (app (clojureV of the-parse-function) (numV 5))"
0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #"; then it goes ahead and applies the function by interpreting the bo"
 #"dy with an extended environment."
) 0 0 4 29 1 #"\n"
0 0 17 3 85
(
 #";   (interp body-of-the-parse-function ('sexpr (numV 5))) ; that las"
 #"t part is the env"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 32 #"; interpret an expr in ast form."
0 0 4 29 1 #"\n"
0 0 17 3 64
#";(test (myself-k2 '(app (eval ((symV 'num) (numV 7)))) (numV 7))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"; more notes:"
0 0 4 29 1 #"\n"
0 0 17 3 62
#"; i should probably have my own test library written in Myself"
0 0 4 29 1 #"\n"
0 0 17 3 59
#"; it might be very useful to have print and error functions"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #"; even something as simple as add is changing the representation a l"
 #"ot!"
) 0           0
