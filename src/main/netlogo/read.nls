to-report read [s]
  report first read-with-rest s
end

to-report read-with-rest [s]
  if empty? s [report __boom]
  if first s = "(" [report read-list (but-first s) [] ")" ]
  if first s = "[" [report read-list (but-first s) [] "]" ]
  if first s = "]" [report __boom ]
  if first s = ")" [report __boom ]
  if is-digit? first s [report read-num s]
  report read-symbol s
end

to-report read-num [s]
  let the-num-as-string take-while task [is-digit? ?] s
  let the-rest drop (length the-num-as-string) s
  report (list (read-from-string the-num-as-string) the-rest)
end

to-report read-symbol [s]
  let enders ["(" "[" ")" "]" " " "\n"]
  let the-sym take-while task [not member? ? enders] s
  let the-rest drop (length the-sym) s
  report (list the-sym the-rest)
end

to-report read-list [s acc terminator]
  if empty? s [report __boom]
  if first s = " " [report read-list but-first s acc terminator]
  if first s = terminator [ report (list acc but-first s) ]
  let next-and-rest read-with-rest s
  report (read-list 
    (last next-and-rest) 
    (reverse (fput (first next-and-rest) reverse acc))
    terminator
  )
end

;;;;;;;;;;;;;;;;;;
;; tests
;;;;;;;;;;;;;;;;;;

to read-tests
  test:add "read 5" [] [read "5"] 5
  test:add "read f" [] [read "f"] "f"
  test:add "read list (" [] [read "(f 1 2 3 4 5)"] ["f" 1 2 3 4 5]
  test:add "read list [" [] [read "[f 1 2 3 4 5]"] ["f" 1 2 3 4 5]
  test:add "read nested list" [] [read "([f (f 8)])"] [["f" ["f" 8]]]
end
