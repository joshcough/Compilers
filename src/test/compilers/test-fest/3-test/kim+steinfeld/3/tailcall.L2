((
  (eax <- 11)
  (ebx <- 7)
  (ecx <- 3)
  (call :exp)
  (res <- eax)
  (eax <- (print res))
 )
 (:exp
  (x <- eax)
  (y <- ebx)
  (r <- ecx)
  (test <- y = 1)
  (test <<= 1)
  (test += 1)
  (cjump 3 = test :then :else)
  :then
  (eax <- r)
  (return)
  :else
  (newr <- r)
  (newr >>= 1)
  (x >>= 1)
  (newr *= x)
  (x <<= 1)
  (x += 1)
  (newr <<= 1)
  (newr += 1)
  (newy <- y)
  (newy -= 3)
  (newy += 1)
  (eax <- x)
  (ebx <- newy)
  (ecx <- newr)
  (tail-call :exp)
  ))