/* Generated By:JavaCC: Do not edit this line. MODLParser.java */
public class MODLParser implements MODLParserConstants {

  static CompilerSystem system = new CompilerSystem();
  static Cls currentClass;
  static Var currentVar;
  static Method currentMethod;
  static boolean inMethod;

  static String fileName = "";
  public static void main(String args[]) {
   System.out.println();
   MODLParser parser;
    if (args.length == 0) {
      //System.out.println("MODL Parser Version 1.0.0: Reading from standard input . . .");
      parser = new MODLParser(System.in);
    } else if (args.length == 1) {
      fileName = args[0];
      //System.out.println("MODL Parser Version 1.0.0:  Reading from file  . . .");
      try {
        parser = new MODLParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("MODL Parser Version 1.0.0:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("MODL Parser Version 1.0.0:  Usage is one of:");
      System.out.println("         java MODLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java MODLParser inputfile");
      return;
    }
      try {
        parser.CompilationUnit();
        ErrorHandle.printExceptions();
        //System.out.println("Encountered "+ErrorHandle.errorCount+
        //                   " error(s) during parse of "+ args[0]);
        //System.out.println("parsed successfully.");
      } catch (ParseException e) {
      System.out.println("Encountered unknown errors during parse.");
  }
 //System.out.println(system.toString());
  try{
      system.typeCheck();
      if( CompilerSystem.getTypeCheckErrors() > 0 )
        System.out.println( "\n" + CompilerSystem.getTypeCheckErrors() + " error(s).\n");
      else system.genCode();
  } catch( TypeCheckException tce ){}
}

/*****************************************
 * THE MODL LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  static final public void CompilationUnit() throws ParseException {
    try {
      ClassDeclaration();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ClassDeclaration();
      }
      jj_consume_token(0);
    } catch (ParseException e) {
ErrorHandle err = new ErrorHandle(e,CLASS);
ClassDeclaration();
    }
  }

/*
 * Declaration syntax follows.
 */
  static final public Cls ClassDeclaration() throws ParseException {
  Token name; Cls ext; Token extName;
    try {
   inMethod=false; currentMethod=null;
      jj_consume_token(CLASS);
      name = jj_consume_token(IDENTIFIER);
     Cls c = system.resolveClass( name.toString() );
     if( c!=null ){
        System.out.println("Class: " + name.toString() + " already exists" );
        CompilerSystem.addTypeCheckError();
        currentClass=new Cls( "errorClass" );
        system.addClass( currentClass );
     }
     else{
        currentClass=new Cls( name.toString() );
     }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        extName = jj_consume_token(IDENTIFIER);
        ext = system.resolveClass( extName.toString() );
        if( ext==null ){
           System.out.println("cannot resolve class: " + extName );
           CompilerSystem.addTypeCheckError();
        }
        else{
          currentClass.setSuperClass( ext );
          currentClass.setPointer( currentClass.getSuperClass().getPointer());
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    if( currentClass.getSuperClass()==null ) {
      currentClass.setSuperClass( new Cls( "java/lang/Object" ));
      currentClass.setPointer( 2 );
    }

    system.addClass( currentClass );
      ClassBodyDeclaration();
      jj_consume_token(END);
    } catch (ParseException e) {
ErrorHandle err = new ErrorHandle(e,LBRACKET);
Statements();
    }
  {if (true) return currentClass;}
    throw new Error("Missing return statement in function");
  }

  static final public void ClassBodyDeclaration() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Var();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOCAL:
      case OP:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      Op();
    }
    Main();
  }

  static final public Var Var() throws ParseException {
               Expression e=null; Token t;
    jj_consume_token(VAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
   if( ! inMethod ){
      currentVar = new Field( t.toString() );
      ((Field)currentVar).setScope( currentClass );
      currentClass.addField( (Field)currentVar );
    }
    else{
      currentVar = new Local( t.toString() );
      ((Local)currentVar).setScope( currentMethod );
    }
    QualType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      e = Expression();
                                    currentVar.setExpression( e );
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return currentVar;}
    throw new Error("Missing return statement in function");
  }

  static final public Method Op() throws ParseException {
  inMethod=true;
  Token t;
  Cls type;
  Statements ss;
  CodeBody cb;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOCAL:
        jj_consume_token(LOCAL);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(OP);
      t = jj_consume_token(IDENTIFIER);
    currentMethod = new Method( t.toString() );
    currentMethod.setScope( currentClass );
    currentClass.addMethod( currentMethod );
      jj_consume_token(65);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Params();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(66);
      jj_consume_token(COLON);
      type = Type();
                                    currentMethod.setType( type );
      jj_consume_token(LBRACKET);
      ss = Statements();
      jj_consume_token(RBRACKET);
   currentMethod.setCodeBody( new CodeBody( ss, currentMethod ));
    } catch (ParseException e) {
ErrorHandle err = new ErrorHandle(e,RBRACKET);
    }
  {if (true) return currentMethod;}
    throw new Error("Missing return statement in function");
  }

  static final public Method Main() throws ParseException {
  inMethod=true;
  Token t;
  Cls type;
  Statements ss;
  CodeBody cb;
    try {
      jj_consume_token(MAIN);
    currentMethod = new Method( "main" );
    currentMethod.setScope( currentClass );
    currentClass.addMethod( currentMethod );
  currentMethod.setType( Cls.VOID );
      jj_consume_token(LBRACKET);
      ss = Statements();
      jj_consume_token(RBRACKET);
   currentMethod.setCodeBody( new CodeBody( ss, currentMethod ));
    } catch (ParseException e) {
ErrorHandle err = new ErrorHandle(e,RBRACKET);
    }
  {if (true) return currentMethod;}
    throw new Error("Missing return statement in function");
  }

  static final public void QualType() throws ParseException {
                    Cls c; String q;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      q = UsageQual();
                    currentVar.addQualifier(q);
    }
    c = Type();
      currentVar.setType( c );
  }

  static final public String UsageQual() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
           {if (true) return "final";}
      break;
    case STATIC:
      jj_consume_token(STATIC);
             {if (true) return "static";}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Cls Type() throws ParseException {
                Cls c;
    c = BaseType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      jj_consume_token(68);
               {if (true) return (Cls)Cls.typeToArrayMap.get( c );}
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
   {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Cls BaseType() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      jj_consume_token(BOOL);
         {if (true) return Cls.BOOL;}
      break;
    case INT:
      jj_consume_token(INT);
         {if (true) return Cls.INT;}
      break;
    case CHAR:
      jj_consume_token(CHAR);
          {if (true) return Cls.CHAR;}
      break;
    case ANY:
      jj_consume_token(ANY);
        {if (true) return Cls.ANY;}
      break;
    case VOID:
      jj_consume_token(VOID);
         {if (true) return Cls.VOID;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    Cls c = system.resolveClass( t.toString() );
    {if (true) return (c==null)?new Cls(t.toString()):c;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Params() throws ParseException {
                  Param p;
    p = Param();
             currentMethod.addParam( p );
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      p = Param();
                 currentMethod.addParam( p );
    }
  }

  static final public Param Param() throws ParseException {
                  Param p; Token id; Cls type;
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type = Type();
    p=new Param( id.toString() );
    p.setType( type );
    p.setScope( currentMethod );
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Statements Statements() throws ParseException {
                            Statements ss=new Statements(); Statement s;
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case IF:
        case NEW:
        case NULL:
        case PRINT:
        case RETURN:
        case THIS:
        case TRUE:
        case VAR:
        case WHILE:
        case INTEGER_LITERAL:
        case CHARACTER_LITERAL:
        case MINUS:
        case NOT:
        case IDENTIFIER:
        case 65:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        s = Statement();
                   ss.add( s );
        jj_consume_token(SEMI);
      }
    } catch (ParseException e) {
    ErrorHandle err = new ErrorHandle(e,SEMI);
    Statements();
    }
   {if (true) return ss;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
  Var v; Statement s; Expression e; Expression e2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      s = VarDecStatement();
                          {if (true) return s;}
      break;
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case 65:
      e = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        e2 = Expression();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
       if( e2==null ) {if (true) return new ExpStat( e );}
       else {if (true) return new AssignmentStat( e, e2 );}
      break;
    case IF:
      s = IfStatement();
                      {if (true) return s;}
      break;
    case WHILE:
      s = WhileStatement();
                        {if (true) return s;}
      break;
    case RETURN:
      s = ReturnStatement();
                         {if (true) return s;}
      break;
    case PRINT:
      s = PrintStatment();
                        {if (true) return s;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatment() throws ParseException {
PrintStatement ps = new PrintStatement();
Expression e = null;
    jj_consume_token(PRINT);
    e = Expression();
                          ps.setExp( e ); {if (true) return ps;}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecStat VarDecStatement() throws ParseException {
  Var v; Expression e; VarDecStat as;
    v = Var();
    e=v.getExpression();
    as = new VarDecStat( v, e );
    currentMethod.addLocal( (Local)currentVar );
    {if (true) return as;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStat IfStatement() throws ParseException {
  IfStat i=new IfStat(); ElseIfStat e; ElseIfStats es=new ElseIfStats();
    IfPart(i);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      e = ElsIfPart();
                   es.add( e );
    }
                                       i.setElseIfStats( es );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      ElsePart(i);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(END);
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public void IfPart(IfStat i) throws ParseException {
  Expression e; Statements ss=new Statements();
    jj_consume_token(IF);
    jj_consume_token(65);
    e = Expression();
    jj_consume_token(66);
    jj_consume_token(THEN);
    ss = Statements();
    i.setCond(e); i.setTruePart(ss);
  }

  static final public ElseIfStat ElsIfPart() throws ParseException {
  ElseIfStat e=new ElseIfStat(); Expression exp; Statements ss=new Statements();
    jj_consume_token(ELSEIF);
    jj_consume_token(65);
    exp = Expression();
    jj_consume_token(66);
    jj_consume_token(THEN);
    ss = Statements();
    e.setCond( exp ); e.setTruePart( ss ); {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public void ElsePart(IfStat i) throws ParseException {
  Statements ss=new Statements();
    jj_consume_token(ELSE);
    ss = Statements();
    i.setFalsePart( ss );
  }

  static final public WhileStat WhileStatement() throws ParseException {
  WhileStat willy=new WhileStat();
  Statements ss = new Statements();
  Expression e;
    jj_consume_token(WHILE);
    e = Expression();
    jj_consume_token(DO);
    ss = Statements();
    jj_consume_token(END);
    willy.setCond( e ); willy.setBody( ss ); {if (true) return willy;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStat ReturnStatement() throws ParseException {
  ReturnStat rs = new ReturnStat(); Expression e=null;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case 65:
      e = Expression();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    rs.setExp( e ); rs.setScope( currentMethod ); {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
                            Expression e=new Expression();
    try {
      e = NotStatement();
    } catch (ParseException pe) {
ErrorHandle err = new ErrorHandle(pe,SEMI);
Statements();
    }
 {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression NotStatement() throws ParseException {
                              Not n=new Not(); Expression e=new Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case MINUS:
    case IDENTIFIER:
    case 65:
      e = OrStatement();
                   {if (true) return e;}
      break;
    case NOT:
      jj_consume_token(NOT);
      e = OrStatement();
                      n.setExpression(e); {if (true) return n;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression OrStatement() throws ParseException {
                              Expression left; Expression right=null; Or o = new Or();
    left = AndStatement();
                      o.add( left );
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(OR);
      right = AndStatement();
                                                                    o.add( right );
    }
  if( right==null ) {if (true) return left;}
  else {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression AndStatement() throws ParseException {
                              Expression left; Expression right=null; And a = new And();
    left = EqualsStatement();
                         a.add(left);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      right = EqualsStatement();
                                                                       a.add(right);
    }
  if( right==null ) {if (true) return left;}
  else {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression EqualsStatement() throws ParseException {
                                 Expression left; Expression right=null; Equals e = new Equals();
    left = LessThenStatement();
                          e.add(left);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      jj_consume_token(EQ);
      right = LessThenStatement();
                                                                          e.add(right); {if (true) return e;}
    }
 if( right==null ) {if (true) return left;}
  else {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression LessThenStatement() throws ParseException {
                                   Expression left; Expression right=null; LessThen lt = new LessThen();
    left = GreaterThenStatement();
                             lt.add(left);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      jj_consume_token(LT);
      right = GreaterThenStatement();
                                                                               lt.add(right);
    }
 if( right==null ) {if (true) return left;}
  else {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression GreaterThenStatement() throws ParseException {
                                       Expression left; Expression right=null; GreaterThen gt=new GreaterThen();
    left = NotEqualStatement();
                          gt.add(left);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      jj_consume_token(GT);
      right = NotEqualStatement();
                                                                         gt.add(right);
    }
 if( right==null ) {if (true) return left;}
  else {if (true) return gt;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression NotEqualStatement() throws ParseException {
                                    Expression left; Expression right=null; NotEqual ne=new NotEqual();
    left = GreaterThenEqual();
                         ne.add(left);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NE:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      jj_consume_token(NE);
      right = GreaterThenEqual();
                                                                        ne.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression GreaterThenEqual() throws ParseException {
                                   Expression left; Expression right=null; GreaterThenEqual gte=new GreaterThenEqual();
    left = LessThenEqualStatement();
                              gte.add(left);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GE:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      jj_consume_token(GE);
      right = LessThenEqualStatement();
                                                                                     gte.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return gte;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression LessThenEqualStatement() throws ParseException {
                                         Expression left; Expression right=null; LessThenEqual lte=new LessThenEqual();
    left = PlusStatement();
                      lte.add(left);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
      jj_consume_token(LE);
      right = PlusStatement();
                                                                   lte.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return lte;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression PlusStatement() throws ParseException {
                                Expression left; Expression right=null; Plus p = new Plus();
    left = MinusStatement();
                       p.add(left);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_16;
      }
      jj_consume_token(PLUS);
      right = MinusStatement();
                                                                  p.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression MinusStatement() throws ParseException {
                                 Expression left; Expression right=null; Minus m=new Minus();
    left = MultiplyStatement();
                         m.add(left);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_17;
      }
      jj_consume_token(MINUS);
      right = MultiplyStatement();
                                                                        m.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression MultiplyStatement() throws ParseException {
                                    Expression left; Expression right=null; Multiply m = new Multiply();
    left = DivideStatement();
                        m.add(left);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_18;
      }
      jj_consume_token(MULTIPLE);
      right = DivideStatement();
                                                                    m.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression DivideStatement() throws ParseException {
                                  Expression left; Expression right=null; Divide d=new Divide();
    left = ModStatement();
                     d.add(left);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_19;
      }
      jj_consume_token(DIVIDE);
      right = ModStatement();
                                                             d.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ModStatement() throws ParseException {
                               Expression left; Expression right=null; Mod m=new Mod();
    left = NegationStatement();
                          m.add(left);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOD:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_20;
      }
      jj_consume_token(MOD);
      right = NegationStatement();
                                                                       m.add(right);
    }
if( right==null ) {if (true) return left;}
  else {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression NegationStatement() throws ParseException {
  Negation n=new Negation();
  Expression e=new Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case IDENTIFIER:
    case 65:
      e = BasicExp();
                    {if (true) return e;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      BasicExp();
                   n.setExpression(e); {if (true) return n;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression BasicExp() throws ParseException {
                           Expression e=new Expression();ParenExpression pe;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
      jj_consume_token(65);
      e = Expression();
      jj_consume_token(66);
                         pe=new ParenExpression(); pe.setExpression(e); {if (true) return pe;}
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
      e = ExpressionVars();
                         {if (true) return e;}
      break;
    case NEW:
      e = newTypeStatement();
                        {if (true) return e;}
      break;
    case THIS:
    case IDENTIFIER:
      e = RefStatement();
                        {if (true) return e;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
Expression RefStatement() : { RefStatement r;}
{
   "this"  
       [ "." <IDENTIFIER>  "("   [ Expressions() ]   ")" ] 
   { return r; }
 | 
    <IDENTIFIER> 
       [ [ "[" Expression() "]" ] [ "."  <IDENTIFIER> ]   "("   [ Expressions() ]   ")"  ] 
   { return r; }
}
*/
  static final public Expression RefStatement() throws ParseException {
  IDStatement ids; Token id;
  Token mid = null;
  boolean variableMethod = false;
  boolean array = false;
  ExpressionList el= new ExpressionList();
  Expression arrayExp = new Expression();
  ArrayExpression ae=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        mid = jj_consume_token(IDENTIFIER);
        jj_consume_token(65);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case CHARACTER_LITERAL:
        case MINUS:
        case NOT:
        case IDENTIFIER:
        case 65:
          el = Expressions();
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        jj_consume_token(66);
                   {if (true) return new MethodStatement(  mid.toString(),
                                                null,
                                                currentClass,
                                                el );}
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
     {if (true) return new ThisStatement( currentClass );}
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                     ids = new IDStatement( id.toString(), currentClass, currentMethod );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case 65:
      case 67:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 67:
          jj_consume_token(67);
          arrayExp = Expression();
          jj_consume_token(68);
                    ids.resolve();
                    ae = new ArrayExpression( ids, arrayExp );
                    array = true;
                    {if (true) return ae;}
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          mid = jj_consume_token(IDENTIFIER);
                                   variableMethod=true;
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(65);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case CHARACTER_LITERAL:
        case MINUS:
        case NOT:
        case IDENTIFIER:
        case 65:
          el = Expressions();
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        jj_consume_token(66);
              if( variableMethod ) {
                MethodStatement ms = new MethodStatement( mid.toString(),
                                            ids,
                                            currentClass,
                                            el );
                {if (true) return ms;}
              }
              else{
                  MethodStatement ms = new MethodStatement (  id.toString(),
                                                null,
                                                currentClass,
                                                el );
                   {if (true) return ms;}
              }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
     if( ae == null ){
       ids.resolve();
       if( ids.getVar() == null ){
          Local l = new Local( ids.getName() );
          l.setScope( currentMethod );
          l.setType( Cls.ANY );
          currentMethod.addLocal( l );
          ids.setVar( l );
       }
        {if (true) return ids;}
    } else {if (true) return ae;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression newTypeStatement() throws ParseException {
  Cls type;
  Expression e=null;
  NewStatement ns;
    jj_consume_token(NEW);
    type = BaseType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
      jj_consume_token(65);
      jj_consume_token(66);
                {if (true) return new NewStatement( type );}
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(67);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case 65:
      e = Expression();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(68);
                            ns=new NewStatement( type, e ); {if (true) return ns;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpressionVars() throws ParseException {
                                TerminalExpression te = new TerminalExpression(); Literal l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
           te = new TerminalExpression("true"); {if (true) return te;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
           te = new TerminalExpression("false"); {if (true) return te;}
      break;
    case NULL:
      jj_consume_token(NULL);
           te = new TerminalExpression("null"); {if (true) return te;}
      break;
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
      l = Literal();
        if(l.isString()){
          te = new TerminalExpression(l.getString()); {if (true) return te;}
        }
        te = new TerminalExpression(l.getInt()); {if (true) return te;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionList Expressions() throws ParseException {
                                  Expression e; ExpressionList el=new ExpressionList();
    try {
      e = Expression();
                   el.add( e );
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        e = Expression();
                       el.add( e );
      }
    } catch (ParseException pe) {
ErrorHandle err = new ErrorHandle(pe,SEMI);
Statement();
    }
  {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Literal Literal() throws ParseException {
                       Token t; Literal l=new Literal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                        l=new IntLit( t.toString() );
                                                         {if (true) return l;}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                          l=new CharLit( t.toString() );
                                                            {if (true) return l;}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public MODLParserTokenManager token_source;
  static ASCII_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[46];
  static final private int[] jj_la1_0 = {0x2000,0x20000,0x0,0x11000000,0x0,0x1000000,0x0,0x80100000,0x80100000,0x0,0x400e00,0x0,0x6c280000,0x0,0x6c280000,0x10000,0x8000,0xc080000,0xc080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc080000,0xc080000,0xc080000,0x0,0x0,0x0,0xc080000,0x0,0x0,0x0,0xc080000,0x8080000,0x0,0x0,};
  static final private int[] jj_la1_1 = {0x0,0x0,0x8,0x0,0x200,0x0,0x40000000,0x0,0x0,0x0,0x40000010,0x4000000,0x408800ee,0x200,0x408800ee,0x0,0x0,0x408800c6,0x408800c6,0x10000,0x20000,0x1000,0x800,0x400,0x8000,0x4000,0x2000,0x40000,0x80000,0x100000,0x200000,0x400000,0x400800c6,0x400000c6,0x408800c6,0x2000000,0x0,0x2000000,0x408800c6,0x2000000,0x40000002,0x0,0x408800c6,0xc4,0x4000000,0xc0,};
  static final private int[] jj_la1_2 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x0,0x8,0x0,0x2,0xa,0x0,0x2,0x2,0x0,0x0,0x0,};

  public MODLParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new MODLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  public MODLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new MODLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  public MODLParser(MODLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  public void ReInit(MODLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[69];
    for (int i = 0; i < 69; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
