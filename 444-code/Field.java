/* Generated by Together */

class Field extends Statement implements Var {
  String name=null;
  Cls type=null;
  Cls scope=null;
  Qualifiers qualifiers=new Qualifiers();
  Expression initializer;
  int pointer;

  Field(){}
  Field(String name){ setName( name ); }

  public String toString(){
    String toString="Field:";
    toString += " name " + name;
    toString += ", type " + type.getName();
    toString += ", scope " + scope.getName();
    toString += ", stack pointer " + pointer;
    return toString;
  }

  public String getName(){ return name; }
  public Cls getType(){ return type; }
  public void setName(String s){ name=s; }
  public void setType(String s){setType( new Cls(s) );}
  public void setType(Cls c){ type = c; }
  public void setScope( Cls c ){ scope = c; }
  public Cls getScope(){ return scope; }
  public void setExpression( Expression e ){ initializer=e; }
  public Expression getExpression(){ return initializer; }
  public void addQualifier( String q ){ qualifiers.addQualifier( q ); }
  Qualifiers getQualifiers(){ return qualifiers; }
  public boolean isFinal(){ return qualifiers.isFinal(); }
  boolean isStatic(){ return qualifiers.isStatic(); }
  public void setPointer( int i ){ pointer = i; }
  public int getPointer(){ return pointer; }   
    

  void typeCheck() throws TypeCheckException {
    if( initializer == null ) return;
    initializer.typeCheck();
    ensureNotVoid( this.getType() );
    ensureNotPrimitiveNull( this, initializer );
    ensureCompatibleTypes( this, initializer );
  }
 
   void ensureNotVoid( Cls c )throws TypeCheckException{
    if( c == Cls.VOID ){
      System.out.println( "Cannot declare a variable of type: void" );
      throw new TypeCheckException();
    }
  }

  void genCode(){
    System.out.print( ".field public " );
    qualifiers.genCode();
    System.out.print( getName() + " " );
    if(  Cls.isPrimitive( getType() ) ){
      
    }
    System.out.println( getType().genSignature() );
  }

  public void genLoad(){
    if( isStatic() ) System.out.print("getstatic " );
    else System.out.print( "aload_0\ngetfield " );
    System.out.println( scope.getName() + "/" + getName() + " " + 
                        getType().genSignature()
                        );
  }

  public void genStore(){
    if( isStatic() ) System.out.print("putstatic " );
    else System.out.print("aload_0\nputfield " );
    System.out.println ( scope.getName() + "/" + getName() + " " + 
                         getType().genSignature()
                       );
  }
}

