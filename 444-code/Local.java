/* Generated by Together */

public class Local extends Statement implements Var{
  String name=null;
  Cls type=null;
  Method scope=null;
  Expression initializer;
  Qualifiers qualifiers=new Qualifiers();
  int pointer;

  Local(){}
  Local(String name){ setName( name ); }
 
  public String toString(){
    String toString="Local:";
    toString += " name " + name;
    toString += ", type " + type.getName();
    toString += ", scope " + scope.getName();
    toString += ", stack pointer " + pointer;
    return toString;
  }

  public void setPointer( int i ){ pointer = i; }
  public int getPointer(){ return pointer; }   
  public String getName(){ return name; }
  public Cls getType(){ return type; }
  public void setName(String s){ name=s; }
  public void setType(String s){setType( new Cls(s) );}
  public void setType(Cls c){ type = c; }
  public void setScope( Method m ){ scope = m; }
  public Method getScope(){ return scope; }
  public void setExpression( Expression e ){ initializer=e; }
  public Expression getExpression(){ return initializer; }
  public void addQualifier( String q ){ 
    if( q.equals("static") ){ staticLocalError(); return; }
    qualifiers.addQualifier( q ); 
  }
  Qualifiers getQualifiers(){ return qualifiers; }
  public boolean isFinal(){ return qualifiers.isFinal(); }
  boolean isStatic(){ return false; } 

  void staticLocalError(){
  }

  void typeCheck() throws TypeCheckException {
    if( initializer == null ) return;
    initializer.typeCheck();
    ensureNotPrimitiveNull( this, initializer );
    ensureCompatibleTypes( this, initializer );
  }

  public void genLoad(){
    if( Cls.isPrimitive( type ) ){ System.out.print( "iload " ); }
    else System.out.print( "aload " );
    System.out.println ( getPointer() );
  }

  public void genStore(){
    System.out.println( "astore " + getPointer() );
  }

}
