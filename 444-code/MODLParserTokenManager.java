/* Generated By:JavaCC: Do not edit this line. MODLParserTokenManager.java */

public class MODLParserTokenManager implements MODLParserConstants
{
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ffffffe00L) != 0L)
         {
            jjmatchedKind = 62;
            return 20;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 22;
         return -1;
      case 1:
         if ((active0 & 0x3fefdfbe00L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
            return 20;
         }
         if ((active0 & 0x10204000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x37eb1bbc00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active0 & 0x804c40200L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0x20e19a2000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return 20;
         }
         if ((active0 & 0x170a019c00L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0xc0831000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x2021182000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x21000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0xc0810000L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 37:
         return jjStopAtPos(0, 54);
      case 38:
         return jjStopAtPos(0, 49);
      case 40:
         return jjStopAtPos(0, 65);
      case 41:
         return jjStopAtPos(0, 66);
      case 42:
         return jjStopAtPos(0, 52);
      case 43:
         return jjStopAtPos(0, 50);
      case 44:
         return jjStopAtPos(0, 58);
      case 45:
         return jjStopAtPos(0, 51);
      case 46:
         return jjStopAtPos(0, 57);
      case 47:
         return jjStartNfaWithStates_0(0, 53, 22);
      case 58:
         return jjStopAtPos(0, 56);
      case 59:
         return jjStopAtPos(0, 59);
      case 60:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 61:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 62:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 91:
         return jjStopAtPos(0, 67);
      case 93:
         return jjStopAtPos(0, 68);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3800L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x78000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x180000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe00000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x700000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1800000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 123:
         return jjStopAtPos(0, 60);
      case 124:
         return jjStopAtPos(0, 48);
      case 125:
         return jjStopAtPos(0, 61);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x802080000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x44000000L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 20);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2300001800L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc40200L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000400L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 20);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80003800L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 20);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x3202000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 20);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40820000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 119:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 20);
         break;
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1100000L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 20);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 20);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 20);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 20);
         break;
      case 114:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x82000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 20);
         break;
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 20);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80810000L);
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 20);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 20);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 20);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 20);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(35, 36);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(3, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if (curChar == 39 && kind > 39)
                     kind = 39;
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 3);
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 8:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 11:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 14:
                  if (curChar == 34 && kind > 40)
                     kind = 40;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 47)
                     jjAddStates(3, 5);
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 25:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 26:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 42)
                     jjCheckNAddStates(15, 17);
                  break;
               case 30:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 32:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 33:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 34:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 35:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar == 42)
                     jjCheckNAddStates(18, 20);
                  break;
               case 37:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 36);
                  break;
               case 38:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 36);
                  break;
               case 39:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(20);
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(21, 23);
                  break;
               case 5:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(24, 26);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 23:
                  jjAddStates(0, 2);
                  break;
               case 28:
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  jjCheckNAddTwoStates(31, 29);
                  break;
               case 35:
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
               case 38:
                  jjCheckNAddTwoStates(38, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   23, 24, 26, 22, 33, 34, 11, 12, 14, 2, 4, 11, 12, 16, 14, 29, 
   30, 32, 36, 37, 39, 5, 6, 8, 13, 15, 17, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\101\156\171", 
"\142\157\157\154", "\143\150\141\162", "\143\150\141\162\114\151\164", "\143\154\141\163\163", 
"\144\157", "\145\154\163\145", "\145\154\163\145\151\146", 
"\145\170\164\145\156\144\163", "\145\156\144", "\146\141\154\163\145", "\146\151\156\141\154", "\151\146", 
"\151\156\164", "\151\156\164\114\151\164", "\154\157\143\141\154", "\155\141\151\156", 
"\156\145\167", "\156\165\154\154", "\157\160", "\120\122\111\116\124", 
"\162\145\164\165\162\156", "\163\164\141\164\151\143", "\164\150\145\156", "\164\150\151\163", 
"\164\162\165\145", "\166\141\162", "\166\157\151\144", "\167\150\151\154\145", null, null, null, 
"\75", "\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\174", "\46", "\53", 
"\55", "\52", "\57", "\45", "\41", "\72", "\56", "\54", "\73", "\173", "\175", null, 
null, null, "\50", "\51", "\133", "\135", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffffffe01L, 0x1eL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 
};
static private ASCII_CharStream input_stream;
static private final int[] jjrounds = new int[40];
static private final int[] jjstateSet = new int[80];
static protected char curChar;
public MODLParserTokenManager(ASCII_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public MODLParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
