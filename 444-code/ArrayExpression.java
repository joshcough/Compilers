/* Generated by Together */

public class ArrayExpression extends Expression{

  Var array;
  Expression index;
  IDStatement idStat;

  ArrayExpression( IDStatement i, Expression e ){
    idStat = i; index = e;
  }

  IDStatement getIDStatement(){ return idStat; }

  void typeCheck() throws TypeCheckException{
    type = idStat.getVar().getType();
    if( ! Cls.isArray( type ) ){ 
      System.out.println( "variable: " + idStat.getVar().getName() +
                          " is not an array.");
      throw new TypeCheckException(); 
    }
    type = (Cls)Cls.arrayToTypeMap.get( type );
  }

  void genCode(){
    genLoad();
  }

  void genLoad(){
    System.out.println( ";----array load---------");
    idStat.genLoad();
    index.genLoad();
    if( type == Cls.BOOL ) System.out.println( "baload" );
    else if( type == Cls.INT || type == Cls.CHAR ) System.out.println( "iaload" );
    else System.out.println ( "aaload" );
    System.out.println( ";----array load end----");
  }

  void genStore(){
    System.out.println( ";----array store--------");
    index.genLoad();
    idStat.genLoad();
    if( type == Cls.BOOL ) System.out.println( "bastore" );
    else if( type == Cls.INT || type == Cls.CHAR ) System.out.println( "iastore" );
    else System.out.println ( "aastore" );
    System.out.println( ";----array store end----");
  }
  
}
