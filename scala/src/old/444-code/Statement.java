/* Generated by Together */

public class Statement {

  public String toString(){ return "Statement()"; }

  void typeCheck() throws TypeCheckException {}

  void genCode(){
    System.out.println("  Statement");
  }
  
  void ensureInt( Expression e, String operator ) throws TypeCheckException{
    boolean b = e.getType() == Cls.INT;
    if( ! b ){ 
      printOperatorError( e.getType(), operator );
      throw new TypeCheckException();
    }
  }
  
  void ensureBool( Expression e, String operator ) throws TypeCheckException{
    boolean b = e.getType() == Cls.BOOL;
    if( ! b ){ 
      printOperatorError( e.getType(), operator );
      throw new TypeCheckException();
    }
  } 
  
  void ensureCompatibleTypes( Var v, Expression e ) throws TypeCheckException{
    Cls vType = v.getType();
    Cls eType = e.getType();
    ensureCompatibleTypes( vType, eType );
  }
  
  void ensureCompatibleTypes( Cls c1, Cls c2 )throws TypeCheckException{
    if( c1 != c2 ){
       if( ! c1.isSuperClass( c2 ) ){
         if( c1 != Cls.ANY && c2 != Cls.ANY && ! Cls.isNull( c2 ) ){
           if( c2 == null ){ 
             printIncompatibleTypesError( c1 );
             throw new TypeCheckException();
           }
           else{ 
             printIncompatibleTypesError( c1, c2 );
             throw new TypeCheckException();
           }
         }
       }
    }
  }
        
  void printIncompatibleTypesError( Cls c1, Cls c2 ){
    System.out.println( "incompatible types: " + 
                        c1.getName() + "," + 
                        c2.getName() + "\n");
  }

  void printIncompatibleTypesError( Cls c ){
    System.out.println( "incompatible types: " + 
                        c.getName() + ", null\n" );
  }
  
  void printOperatorError( Cls type, String operator ){  
    System.out.println("operator "+operator+" cannot be applied to "+type.getName()+"\n");
  }

  void ensureNotPrimitiveNull( Var v, Expression e ) throws TypeCheckException {
    Cls vType = v.getType();
    Cls eType = e.getType();
    if( Cls.isPrimitive( vType ) && Cls.isNull( eType ) ){
      printPrimitiveNullAssignmentError( v );
      throw new TypeCheckException();
    }
  }

  void printPrimitiveNullAssignmentError( Var v ){
    System.out.println("cannot assign primitive: " + 
                       v.getName() + "<" + v.getType().getName() + ">" +
                       " to null\n");
  }
}
