/* Generated by Together */
import java.util.*;

public class BinaryExpression extends Expression {
  ExpressionList el;
  Cls cmpType;
  
  void genCode(){
    Iterator it = el.iterator();
    ((Expression)it.next()).genCode();
    for( ; it.hasNext(); ){
      ((Expression)it.next()).genCode();   
    }
  }

  void genOperators( String op ){
   for( int i = 0; i<el.size()-1; i++ ){
     System.out.println( op );
    }  
  }

  void genLoads(){
    for( Iterator it = el.iterator(); it.hasNext(); ){
      ((Expression)it.next()).genCode();
    }
  }

  void genCmpCode( String cmp ){
    Iterator it = el.iterator();
    ((Expression)it.next()).genCode();
    ((Expression)it.next()).genCode();
    genLabelsAndGotos( cmp );
    while( it.hasNext() ){
      ((Expression)it.next()).genCode();
      genLabelsAndGotos( cmp );
    }
  }

  void genLabelsAndGotos( String cmp ){
    String label1 = Cls.getLabel();
    String label2 = Cls.getLabel();
    String label3 = Cls.getLabel();
    System.out.println( cmp + " " + label1 );
    System.out.println( "\tbipush 0" );
    System.out.println( label2 + ":" );
    System.out.println( "\tgoto " + label3 );
    System.out.println( label1 + ":" );
    System.out.println( "\tbipush 1" );
    //System.out.println( "goto " + label2 );
    System.out.println( label3 + ":" );
  }

  void typeCheck() throws TypeCheckException {
    el.typeCheck();
    for(Iterator it = el.iterator(); it.hasNext();){
      Expression e =(Expression)it.next() ;
      if( e.getType() != Cls.INT ) {
        System.out.println("Incompatable types found : " + e.type + "was expecting "+ Cls.INT + "\n");
      }
    }    
    type = Cls.INT;
  }


  Cls ensureSameTypes( ExpressionList el, String operator ) throws TypeCheckException{
    Cls c = ((Expression)el.get(0)).getType();
    for( Iterator it = el.iterator(); it.hasNext(); ){
      Expression e = (Expression)it.next();
      if( e.getType() != c ){
        printDifferentTypesError( el, operator );
        throw new TypeCheckException();
      }
    }
    return c;
  }

  void ensureInt( ExpressionList el, String operator  ) throws TypeCheckException{
    boolean b = ((Expression)el.get(0)).getType() == Cls.INT;
    if( ! b ){ 
        printOperatorError(((Expression)el.get(0)).getType(), operator); 
        throw new TypeCheckException(); 
    }
  }
  
  void ensureBool( ExpressionList el, String operator )throws TypeCheckException{
    boolean b = ((Expression)el.get(0)).getType() == Cls.BOOL;
    if( ! b ){ 
        printOperatorError(((Expression)el.get(0)).getType(), operator); 
        throw new TypeCheckException(); 
    }
  } 

   void ensureIntOrChar( ExpressionList el, String operator  )throws TypeCheckException{
       boolean b = ( 
         ((Expression)el.get(0)).getType() == Cls.INT   ||
         ((Expression)el.get(0)).getType() == Cls.CHAR  
       );
       if( ! b ){ 
        printOperatorError(((Expression)el.get(0)).getType(), operator); 
        throw new TypeCheckException(); 
       }
  }

  void ensureIntOrBool( ExpressionList el, String operator  )throws TypeCheckException{
       boolean b = ( 
         ((Expression)el.get(0)).getType() == Cls.INT   ||
         ((Expression)el.get(0)).getType() == Cls.BOOL  
       );
       if( ! b ){ 
        printOperatorError(((Expression)el.get(0)).getType(), operator); 
        throw new TypeCheckException(); 
       }
  }
  
  void printDifferentTypesError(ExpressionList l, String operator ){ 
    String types = "";
    for( Iterator it = l.iterator(); it.hasNext(); ){
      Expression e = (Expression)it.next();
      types += e.getType().getName();
      if( it.hasNext() ) types += ", ";
    }
    System.out.println( "operator " + operator + " cannot be applied to " + types + "\n");
  }

}
