/* Generated by Together */

public class Method{
    
  String name;
  Cls scope;
  Cls returnType;
  Params params;
  Locals locals;
  Qualifiers qualifiers;
  CodeBody body;
  int pointer;
  int outPointer=1;
   
  Method(){}
  Method(String name){ 
    setName( name ); 
    locals=new Locals(); 
    params=new Params();
    if( name.equals( "main" ) ) outPointer++;
  }

  public String toString(){
    String toString="Method:";
    toString += " name " + name;
    toString += ", type " + returnType.getName();
    toString += ", scope " + scope.getName();
    toString += ", pointer " + getPointer();
    toString += "\n" + params.toString();
    toString += "\n" + locals.toString();
    toString += "\n" + "CodeBody:\n" + body.toString();
    return toString;
  }
    
  void addLocal( Local l ){ 
      if( ! contains( l ) ){ locals.add( l ); l.setPointer( outPointer++ ); } 
      else{
          System.out.println("Local: " + l.getName() + 
                             " already declared in Method: " + 
                             l.getScope().getName() + " " +
                             "Class: " + l.getScope().getScope().getName() ); 
      }
  }
  void addParam( Param p ){ params.addParam( p ); p.setPointer( outPointer++ ); }
  public String getName(){ return name; }
  public Cls getType(){ return returnType; }
  public Locals getLocals() { return locals; }
  public Params getParams() {return params; }
  public void setName(String s){ name=s; }
  public void setType(String s){setType( new Cls(s) );}
  public void setType(Cls c){ returnType = c; }
  public void setScope( Cls c ){ scope = c; }
  public Cls getScope(){ return scope; } 
  void addQualifier( String s ){}
  void setCodeBody( CodeBody cb ){ body = cb; }
  CodeBody getCodeBody(){ return body; }

  Var resolveVar( String name ){
    Local l = (Local)locals.get( name );
    if( l != null ) return l;
    Param p = params.get( name );
    if( p != null ) return p;
    else return null;
  }

  void typeCheck() throws TypeCheckException {
    body.typeCheck();
  }
  
  boolean contains( Var v ){
    return (params.contains( v )) || (locals.get( v.getName() )!=null);
  }

  public void setPointer( int i ){ pointer = i; }
  public int getPointer(){ return pointer; }     
  


  void genCode(){
    System.out.println();
    System.out.print(".method public ");
  
    if( getName().equals( "main" ) ) System.out.print ("static " );   
 
    System.out.print( getName());
    System.out.print("(");
    params.genCode(); 

    if( getName().equals( "main" ) ) System.out.print ("[Ljava/lang/String;");

    System.out.print(")");    
    System.out.println( returnType.genSignature() );
    System.out.println(".limit stack 99");
    System.out.println(".limit locals 99");

    body.genCode();

    System.out.println( ".end method" );
  }

}
